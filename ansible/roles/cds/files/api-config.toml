
#####################
# API Configuration 
#####################
[api]

  # if no model and no os/arch is specified in your job's requirements then spawn worker on this architecture (example: amd64, arm, 386)
  defaultArch = "amd64"

  # if no model and os/arch is specified in your job's requirements then spawn worker on this operating system (example: freebsd, linux, windows)
  defaultOS = "linux"

  # Either filesystem local storage or Openstack Swift Storage are supported
  [api.artifact]

    # swift or local
    mode = "local"

    [api.artifact.local]
      baseDirectory = "/tmp/cds/artifacts"

    [api.artifact.openstack]

      # Use if your want to prefix containers for CDS Artifacts
      containerPrefix = ""

      # True if you want to disable Temporary URL in file upload
      # disableTempURL = false

      # Openstack Domain, generally value of $OS_DOMAIN_NAME, v3 auth only
      domain = ""

      # Openstack Password, generally value of $OS_PASSWORD
      password = ""

      # Region, generally value of $OS_REGION_NAME
      region = ""

      # Openstack Tenant, generally value of $OS_TENANT_NAME, v2 auth only
      tenant = ""

      # Authentication Endpoint, generally value of $OS_AUTH_URL
      url = ""

      # Openstack Username, generally value of $OS_USERNAME
      username = ""

  ##############################
  # CDS Authentication Settings#
  ##############################
  [api.auth]

    # The default group is the group in which every new user will be granted at signup
    defaultGroup = ""

    # Token for shared.infra group. This value will be used when shared.infra will be created
    #at first CDS launch. This token can be used by CDS CLI, Hatchery, etc...
    #This is mandatory.
    sharedInfraToken = "yul7r7qqdies8tvjnyuveuh5m3zp505o68r11avjn0qqqnvpe0s19ppzvvudgw49rpznjfhdb2n8srrmrcr9mn4ny4o9evobin9w4tkzittxw9a38pgxyh1rq8gzlho5"

    [api.auth.ldap]
      base = "dc=myorganization,dc=com"

      # Define it if ldapsearch need to be authenticated
      bindDN = ""

      # Define it if ldapsearch need to be authenticated
      bindPwd = ""
      dn = "uid=%s,ou=people,dc=myorganization,dc=com"
      enable = false
      fullname = "{{.givenName}} {{.sn}}"
      host = ""
      port = 636
      ssl = true

    [api.auth.local]

      # Allow signup from selected domains only - comma separated. Example: your-domain.com,another-domain.com
      # signupAllowedDomains = ""

  ######################
  # CDS Cache Settings 
  ######################
  #
  [api.cache]
    ttl = 60

    # Connect CDS to a redis cache If you more than one CDS instance and to avoid losing data at startup
    [api.cache.redis]

      # If your want to use a redis-sentinel based cluster, follow this syntax! <clustername>@sentinel1:26379,sentinel2:26379,sentinel3:26379
      host = "localhost:6379"
      password = ""

  ################################
  # Postgresql Database settings 
  ################################
  [api.database]

    # Maximum wait for connection, in seconds
    connectTimeout = 10
    host = "10.240.0.90"

    # DB Max connection
    maxconn = 20
    name = "cds"
    password = "cds"
    port = 5432

    # Set a specific role to run SET ROLE for each connection
    # role = ""

    # DB SSL Mode: require (default), verify-full, or disable
    sslmode = "disable"

    # Statement timeout value in milliseconds
    timeout = 3000
    user = "cds"

  [api.directories]
    download = "/opt/cds/download"
    keys = "/tmp/cds/keys"

  #######################
  # CDS Events Settings 
  #######################
  [api.events]

    [api.events.kafka]
      broker = ""
      enabled = false
      maxmessagebytes = 10000000
      password = ""
      topic = ""
      user = ""

  ###########################
  # CDS Features flipping Settings 
  ###########################
  [api.features]

    # Feature flipping provider: https://maif.github.io/izanami
    [api.features.izanami]
      apiurl = ""
      clientid = ""
      clientsecret = ""

      # Token shared between Izanami and CDS to be able to send webhooks from izanami
      token = ""

  ###########################
  # Graylog Search. 
  # When CDS API generates errors, you can fetch them with cdsctl. 
  # Examples: 
  # $ cdsctl admin errors get <error-id> 
  # $ cdsctl admin errors get 55f6e977-d39b-11e8-8513-0242ac110007 
  ###########################
  [api.graylog]
    accessToken = ""
    stream = ""

    # Example: http://localhost:9000
    url = ""

  [api.grpc]

    # Listen GRPC address without port, example: 127.0.0.1
    # addr = ""
    port = 8082

  [api.http]

    # Listen HTTP address without port, example: 127.0.0.1
    # addr = ""
    port = 8081
    sessionTTL = 60

  ###########################
  # Log settings.
  ###########################
  [api.log]

    # Max service logs size in bytes (default: 15MB)
    serviceMaxSize = 15728640

    # Max step logs size in bytes (default: 15MB)
    stepMaxSize = 15728640

  [[api.providers]]
    name = "sample-provider"
    token = "wroyziwi3fcpbo9xeiqd3gxrlx7g5qze"

  [api.secrets]
    key = "5e1kwrwr4e5n6n32hdsvh0lu21v7sxfz"

  [[api.services]]
    healthPath = "/cds"
    healthPort = "443"
    healthUrl = "https://ovh.github.io"
    name = "sample-service"
    path = "/cds"
    port = "443"
    type = "doc"
    url = "https://ovh.github.io"

  #####################
  ## CDS SMTP Settings 
  #####################
  [api.smtp]
    disable = true
    from = "no-reply@cds.local"
    host = ""
    password = ""
    port = ""
    tls = false
    user = ""

  ###########################
  # CDS Status Settings 
  # Documentation: https://ovh.github.io/cds/hosting/monitoring/ 
  ###########################
  [api.status]

    [api.status.api]

      # if less than minInstance of API is running, an alert will on Global/API be created on /mon/status
      minInstance = 1

    [api.status.dbmigrate]

      # if less than minInstance of dbmigrate service is running, an alert on Global/dbmigrate will be created on /mon/status
      minInstance = 1

    [api.status.elasticsearch]

      # if less than minInstance of elasticsearch service is running, an alert on Global/elasticsearch will be created on /mon/status
      minInstance = 1

    [api.status.hatchery]

      # if less than minInstance of hatchery service is running, an alert on Global/hatchery will be created on /mon/status
      minInstance = 1

    [api.status.hooks]

      # if less than minInstance of hooks service is running, an alert on Global/hooks will be created on /mon/status
      minInstance = 1

    [api.status.repositories]

      # if less than minInstance of repositories service is running, an alert on Global/hooks will be created on /mon/status
      minInstance = 1

    [api.status.vcs]

      # if less than minInstance of vcs service is running, an alert will on Global/vcs be created on /mon/status
      minInstance = 1

  #####################
  # CDS URLs Settings 
  #####################
  [api.url]
    api = "http://XXX_CDS_PUBLIC_IP_ADDRESS_XXX:8081"
    ui = "http://XXX_CDS_PUBLIC_IP_ADDRESS_XXX:2015"

  [api.vault]
    configurationKey = ""

[hatchery]

  # Hatchery Kubernetes.
  [hatchery.kubernetes]

    # Certificate authority data (content, not path and not base64 encoded) for tls kubernetes (optional if no tls needed)
    # certAuthorityData = ""

    # Client certificate data (content, not path and not base64 encoded) for tls kubernetes (optional if no tls needed)
    # clientCertData = ""

    # Client certificate data (content, not path and not base64 encoded) for tls kubernetes (optional if no tls needed)
    # clientKeyData = ""

    # Worker default memory in Mo
    defaultMemory = 1024

    # Kubernetes config file in yaml
    kubernetesConfigFile = "/root/.kube/config"

    # Address of kubernetes master
    kubernetesMasterURL = "https://10.240.0.9:6443"

    # Kubernetes namespace in which workers are spawned
    namespace = "cds"

    # Nb Workers to provision
    nbProvision = 1

    # Password to connect to kubernetes cluster (optional if config file is set)
    # password = ""

    # Token to connect to kubernetes cluster (optional if config file is set)
    # token = ""

    # Username to connect to kubernetes cluster (optional if config file is set)
    # username = ""

    # Worker TTL (minutes)
    workerTTL = 10

    [hatchery.kubernetes.commonConfiguration]

      # Name of Hatchery
      name = "kubernetes"

      # URL of this Hatchery
      url = "http://localhost:8086"

      [hatchery.kubernetes.commonConfiguration.api]

        # Maximum allowed consecutives failures on heatbeat routine
        maxHeartbeatFailures = 10

        # Request CDS API: timeout in seconds
        requestTimeout = 10

        # CDS Token to reach CDS API. See https://ovh.github.io/cds/advanced/advanced.worker.token/ 
        token = ""

        [hatchery.kubernetes.commonConfiguration.api.grpc]

          # sslInsecureSkipVerify, set to true if you use a self-signed SSL on CDS API
          # insecure = false
          # url = "http://localhost:8082"

        [hatchery.kubernetes.commonConfiguration.api.http]

          # sslInsecureSkipVerify, set to true if you use a self-signed SSL on CDS API
          # insecure = false

          # CDS API URL
          url = "http://10.240.0.91:8081"

      ######################
      # CDS Hatchery HTTP Configuration 
      #######################
      [hatchery.kubernetes.commonConfiguration.http]

        # Listen address without port, example: 127.0.0.1
        # addr = ""
        port = 8086

      # Hatchery Log Configuration
      [hatchery.kubernetes.commonConfiguration.logOptions]

        [hatchery.kubernetes.commonConfiguration.logOptions.spawnOptions]

          # log critical if spawn take more than this value (in seconds)
          thresholdCritical = 480

          # log warning if spawn take more than this value (in seconds)
          thresholdWarning = 360

      [hatchery.kubernetes.commonConfiguration.provision]

        # Disabled provisioning. Format:true or false
        disabled = false

        # Check provisioning each n Seconds
        frequency = 30

        # if worker is queued less than this value (seconds), hatchery does not take care of it
        graceTimeQueued = 4

        # Maximum allowed simultaneous workers provisioning
        maxConcurrentProvisioning = 10

        # Maximum allowed simultaneous workers
        maxWorker = 10

        # Check if some worker model have to be registered each n Seconds
        registerFrequency = 60

        # Worker Log Configuration
        [hatchery.kubernetes.commonConfiguration.provision.workerLogsOptions]

          [hatchery.kubernetes.commonConfiguration.provision.workerLogsOptions.graylog]

            # Example: X-OVH-TOKEN. You can use many keys: aaa,bbb
            extraKey = ""

            # value for extraKey field. For many keys: valueaaa,valuebbb
            extraValue = ""

            # Example: thot.ovh.com
            host = ""

            # Example: 12202
            port = 0

            # tcp or udp
            protocol = "tcp"

#####################
# CDS Logs Settings 
#####################
[log]

  # Log Level: debug, info, warning, notice, critical
  level = ""

  [log.graylog]

    # Example: X-OVH-TOKEN. You can use many keys: aaa,bbb
    extraKey = ""

    # value for extraKey field. For many keys: valueaaa,valuebbb
    extraValue = ""

    # Example: thot.ovh.com
    host = ""

    # Example: 12202
    port = 0

    # tcp or udp
    protocol = ""

